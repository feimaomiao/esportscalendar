package components

import (
	"strings"
	"fmt"
)



templ Index(options []Option) {
	@BaseLayout("EsportsCalendar - Select Games") {
		<div id="select" class="container mx-auto p-4">
			<div class="max-w-2xl mx-auto">
				<div class="card bg-base-100 shadow-xl">
					<div class="card-body">
						<h1 class="card-title text-3xl mb-6">Select games to track</h1>
						
						<form hx-get="/second" 
							  hx-target="#select" 
							  hx-swap="innerHTML"
							  hx-push-url="true">
							
							<div class="space-y-4">
								for _, opt := range options {
									<div class="form-control">
										<label class="label cursor-pointer">
											<div class="option-content">
												<img src={ opt.Logo } alt={ opt.Label } class="w-6 h-6 object-contain"/>
												<span class="label-text text-lg">{ opt.Label }</span>
											</div>
											<input type="checkbox" 
												   name="options" 
												   value={ opt.ID }
												   class="checkbox checkbox-primary"
												   if opt.Checked {
													   checked
												   }/>
										</label>
									</div>
								}
							</div>

							<div class="card-actions justify-end mt-6">
								<button type="submit" class="btn btn-primary">
									Continue to Next Page
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
										<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
									</svg>
								</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	}
}

templ SecondPage(selectedOptions []string) {
	@BaseLayout("Second Page - Results") {
		<div class="container mx-auto p-4">
			<div class="max-w-2xl mx-auto">
				@SecondPageContent(selectedOptions)
			</div>
		</div>
	}
}

templ SecondPageContent(selectedOptions []string) {
	<div class="card bg-base-100 shadow-xl">
		<div class="card-body">
			<h2 class="card-title text-2xl mb-4">Selected Options</h2>
			
			if len(selectedOptions) > 0 {

				<div class="space-y-4">
					<h3 class="font-semibold text-lg">Your selections:</h3>
					<div class="flex flex-col gap-4">
						for _, option := range selectedOptions {
							<div class="card bg-base-200 shadow-md">
								<div class="card-body p-4">
									<h4 class="card-title text-base mb-3">Game ID: { option }</h4>
									<div class="form-control">
										<label class="label">
											<span class="label-text font-medium">Select leagues for this game:</span>
										</label>
										<div class="relative">
											<!-- Selected leagues display -->
											<div id={ "selected-" + option } class="flex flex-wrap gap-2 mb-2 min-h-[2rem]"></div>

											<!-- Searchable dropdown -->
											<div class="dropdown dropdown-open w-full" id={ "dropdown-container-" + option }>
												<input
													type="text"
													id={ "search-" + option }
													placeholder="Type to search leagues..."
													class="input input-bordered w-full"
													autocomplete="off"/>
												<div class="absolute z-[1] w-full bg-base-100 rounded-box shadow-lg mt-1 hidden max-h-64 overflow-y-auto" id={ "dropdown-menu-" + option }>
													<div id={ "loading-" + option } class="p-4 text-center">
														<span class="loading loading-spinner loading-sm"></span>
														<span class="ml-2">Loading leagues...</span>
													</div>
													<ul class="menu p-2 w-full hidden" id={ "league-list-" + option }></ul>
													<div class="p-4 text-center text-sm opacity-70 hidden" id={ "no-results-" + option }>
														No leagues found
													</div>
												</div>
											</div>
										</div>
										<label class="label">
											<span class="label-text-alt text-xs opacity-70">Click to select/deselect leagues</span>
										</label>
									</div>
									@templ.Raw(fmt.Sprintf(`<script type="text/javascript">
										(function() {
											const gameId = %q;
											const searchInput = document.getElementById('search-' + gameId);
											const dropdownMenu = document.getElementById('dropdown-menu-' + gameId);
											const loadingElement = document.getElementById('loading-' + gameId);
											const leagueList = document.getElementById('league-list-' + gameId);
											const noResults = document.getElementById('no-results-' + gameId);
											const selectedContainer = document.getElementById('selected-' + gameId);

											let allLeagues = [];
											let selectedLeagues = new Set();

											// Fetch leagues from API
											fetch('/api/league-options/' + gameId)
												.then(response => response.json())
												.then(data => {
													loadingElement.classList.add('hidden');

													if (data.error) {
														noResults.textContent = data.message;
														noResults.classList.remove('hidden');
													} else if (data.leagues && data.leagues.length > 0) {
														allLeagues = data.leagues;
														renderLeagues(allLeagues);
														leagueList.classList.remove('hidden');
													} else {
														noResults.textContent = 'No leagues available for this game';
														noResults.classList.remove('hidden');
													}
												})
												.catch(error => {
													loadingElement.classList.add('hidden');
													noResults.textContent = 'Failed to load leagues. Please try again.';
													noResults.classList.remove('hidden');
													console.error('Error fetching leagues:', error);
												});

											// Render leagues list
											function renderLeagues(leagues) {
												leagueList.innerHTML = '';
												leagues.forEach(league => {
													const li = document.createElement('li');
													const label = document.createElement('label');
													label.className = 'label cursor-pointer justify-start gap-2 p-2';

													const checkbox = document.createElement('input');
													checkbox.type = 'checkbox';
													checkbox.className = 'checkbox checkbox-sm checkbox-primary';
													checkbox.checked = selectedLeagues.has(league.id);
													checkbox.addEventListener('change', () => toggleLeague(league));

													// Add league image
													const img = document.createElement('img');
													img.src = league.image || '/static/images/default-logo.png';
													img.alt = league.name;
													img.className = 'w-6 h-6 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													label.appendChild(img);

													const span = document.createElement('span');
													span.textContent = league.name;
													span.className = 'text-sm';

													label.appendChild(checkbox);
													label.appendChild(span);
													li.appendChild(label);
													leagueList.appendChild(li);
												});
											}

											// Toggle league selection
											function toggleLeague(league) {
												if (selectedLeagues.has(league.id)) {
													selectedLeagues.delete(league.id);
												} else {
													selectedLeagues.add(league.id);
												}
												updateSelectedDisplay();
											}

											// Update selected leagues display
											function updateSelectedDisplay() {
												selectedContainer.innerHTML = '';
												allLeagues.filter(l => selectedLeagues.has(l.id)).forEach(league => {
													const badge = document.createElement('div');
													badge.className = 'badge badge-primary gap-2';

													// Add league image
													const img = document.createElement('img');
													img.src = league.image || '/static/images/default-logo.png';
													img.alt = league.name;
													img.className = 'w-4 h-4 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													badge.appendChild(img);

													const span = document.createElement('span');
													span.textContent = league.name;
													badge.appendChild(span);

													const removeBtn = document.createElement('button');
													removeBtn.className = 'btn btn-ghost btn-xs btn-circle';
													removeBtn.innerHTML = 'âœ•';
													removeBtn.addEventListener('click', () => {
														selectedLeagues.delete(league.id);
														updateSelectedDisplay();
														const filtered = filterLeagues(searchInput.value);
														renderLeagues(filtered);
													});

													badge.appendChild(removeBtn);
													selectedContainer.appendChild(badge);
												});
											}

											// Filter leagues based on search input
											function filterLeagues(query) {
												const lowerQuery = query.toLowerCase();
												return allLeagues.filter(league =>
													league.name.toLowerCase().includes(lowerQuery)
												);
											}

											// Search input event
											searchInput.addEventListener('input', (e) => {
												const filtered = filterLeagues(e.target.value);
												if (filtered.length > 0) {
													renderLeagues(filtered);
													leagueList.classList.remove('hidden');
													noResults.classList.add('hidden');
												} else {
													leagueList.classList.add('hidden');
													noResults.classList.remove('hidden');
												}
											});

											// Show dropdown on focus
											searchInput.addEventListener('focus', () => {
												dropdownMenu.classList.remove('hidden');
											});

											// Hide dropdown when clicking outside
											document.addEventListener('click', (e) => {
												if (!searchInput.contains(e.target) && !dropdownMenu.contains(e.target)) {
													dropdownMenu.classList.add('hidden');
												}
											});
										})();
									</script>`, option))
								</div>
							</div>
						}
					</div>
				</div>

				<div class="divider"></div>

				<div class="stats shadow">
					<div class="stat">
						<div class="stat-title">Total Selected</div>
						<div class="stat-value text-primary">{ len(selectedOptions) }</div>
						<div class="stat-desc">Options chosen</div>
					</div>
				</div>
			} else {
				<div class="alert alert-warning">
					<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
					</svg>
					<span>No options were selected. Please go back and select at least one option.</span>
				</div>
			}

			<div class="card-actions justify-between mt-6">
				<a href="/" class="btn btn-outline">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
					</svg>
					Back to Options
				</a>
				
				if len(selectedOptions) > 0 {
					<button class="btn btn-success"
							hx-post="/process"
							hx-vals={ fmt.Sprintf(`{"options": "%s"}`, strings.Join(selectedOptions, ",")) }
							hx-target="#result">
						Process Selection
					</button>
				}
			</div>

			<div id="result" class="mt-4">
				<!-- Processing results would appear here -->
			</div>
		</div>
	</div>
}