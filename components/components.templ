package components

import (
	"strings"
	"fmt"
)



templ Index(options []Option) {
	@BaseLayout("EsportsCalendar - Select Games") {
		<div id="select" class="container mx-auto p-4">
			<div class="max-w-2xl mx-auto">
				<div class="card bg-base-100 shadow-xl">
					<div class="card-body">
						<h1 class="card-title text-3xl mb-6">Select games to track</h1>

						<form id="game-form">

							<div class="space-y-4" id="game-options">
								for _, opt := range options {
									<div class="form-control">
										<label class="label cursor-pointer">
											<div class="option-content">
												<div class="bg-white rounded p-1 flex items-center justify-center">
													<img src={ opt.Logo } alt={ opt.Label } class="w-6 h-6 object-contain"/>
												</div>
												<span class="label-text text-lg">{ opt.Label }</span>
											</div>
											<input type="checkbox"
												   name="options"
												   value={ opt.ID }
												   class="checkbox checkbox-primary game-checkbox"
												   if opt.Checked {
													   checked
												   }/>
										</label>
									</div>
								}
							</div>

							<div class="card-actions justify-end mt-6">
								<button type="submit" id="continue-btn" class="btn btn-primary" disabled>
									Continue to Next Page
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
										<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
									</svg>
								</button>
							</div>
						</form>

						<script>
							(function() {
								const continueBtn = document.getElementById('continue-btn');
								const checkboxes = document.querySelectorAll('.game-checkbox');
								const form = document.getElementById('game-form');

								function updateButtonState() {
									const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
									continueBtn.disabled = !anyChecked;
								}

								// Update button state on checkbox change
								checkboxes.forEach(cb => {
									cb.addEventListener('change', updateButtonState);
								});

								// Initial check
								updateButtonState();

								// Handle form submission
								form.addEventListener('submit', async (e) => {
									e.preventDefault();

									// Get selected options
									const selectedOptions = Array.from(checkboxes)
										.filter(cb => cb.checked)
										.map(cb => cb.value);

									console.log('Submitting with options:', selectedOptions);

									// Send POST request with JSON body
									try {
										const response = await fetch('/second', {
											method: 'POST',
											headers: {
												'Content-Type': 'application/json',
												'HX-Request': 'true'
											},
											body: JSON.stringify({ options: selectedOptions })
										});

										console.log('Response status:', response.status);

										if (response.ok) {
											const html = await response.text();
											const container = document.getElementById('select');
											container.innerHTML = html;

											// Execute scripts in the newly inserted HTML
											const scripts = container.querySelectorAll('script');
											scripts.forEach(oldScript => {
												const newScript = document.createElement('script');
												newScript.textContent = oldScript.textContent;
												oldScript.parentNode.replaceChild(newScript, oldScript);
											});

											window.history.pushState({}, '', '/second');
										} else {
											console.error('Request failed:', response.statusText);
											alert('Request failed: ' + response.statusText);
										}
									} catch (error) {
										console.error('Error:', error);
										alert('Error: ' + error.message);
									}
								});
							})();
						</script>
					</div>
				</div>
			</div>
		</div>
	}
}

templ SecondPage(selectedOptions []Option) {
	@BaseLayout("Second Page - Results") {
		<div class="container mx-auto p-4">
			<div class="max-w-5xl mx-auto">
				@SecondPageContent(selectedOptions)
			</div>
		</div>
	}
}

templ SecondPageContent(selectedOptions []Option) {
	<div class="card bg-base-100 shadow-xl">
		<div class="card-body">
			<h2 class="card-title text-2xl mb-4">Selected Options</h2>

			if len(selectedOptions) > 0 {

				<div class="space-y-4">
					<h3 class="font-semibold text-lg">Your selections:</h3>
					<div class="flex flex-col gap-4">
						for _, option := range selectedOptions {
							<div class="card bg-base-200 shadow-md">
								<div class="card-body p-4">
									<div class="flex flex-col items-center gap-3 mb-4">
										<div class="bg-white rounded p-2 flex items-center justify-center">
											<img src={ option.Logo } alt={ option.Label } class="w-16 h-16 object-contain"/>
										</div>
										<h4 class="card-title text-lg">{ option.Label }</h4>
									</div>

									<!-- Combined selected items display -->
									<div class="mb-4">
										<label class="label">
											<span class="label-text font-medium">Selected Leagues & Teams:</span>
										</label>
										<div id={ "selected-combined-" + option.ID } class="flex flex-wrap gap-2 min-h-[2rem] p-2 bg-base-100 rounded-box"></div>
									</div>

									<!-- Search bars side by side on desktop -->
									<div class="grid grid-cols-2 gap-4 items-start">
										<!-- Leagues Section -->
										<div>
											<div class="mb-2">
												<span class="font-medium">Search Leagues:</span>
											</div>
											<div class="relative">
												<!-- Searchable dropdown -->
												<div class="dropdown dropdown-open w-full" id={ "dropdown-container-" + option.ID }>
													<input
														type="text"
														id={ "search-" + option.ID }
														placeholder="Type to search leagues..."
														class="input input-bordered w-full"
														autocomplete="off"/>
													<div class="absolute z-[1] w-full bg-base-100 rounded-box shadow-lg mt-1 hidden max-h-64 overflow-y-auto" id={ "dropdown-menu-" + option.ID }>
														<div id={ "loading-" + option.ID } class="p-4 text-center">
															<span class="loading loading-spinner loading-sm"></span>
															<span class="ml-2">Loading leagues...</span>
														</div>
														<ul class="menu p-2 w-full hidden" id={ "league-list-" + option.ID }></ul>
														<div class="p-4 text-center text-sm opacity-70 hidden" id={ "no-results-" + option.ID }>
															No leagues found
														</div>
													</div>
												</div>
											</div>
											<div class="mt-1">
												<span class="text-xs opacity-70">Click to select/deselect</span>
											</div>
										</div>

										<!-- Teams Section -->
										<div>
											<div class="mb-2">
												<span class="font-medium">Search Teams:</span>
											</div>
											<div class="relative">
												<!-- Searchable dropdown for teams -->
												<div class="dropdown dropdown-open w-full" id={ "dropdown-teams-container-" + option.ID }>
													<input
														type="text"
														id={ "search-teams-" + option.ID }
														placeholder="Type to search teams..."
														class="input input-bordered w-full"
														autocomplete="off"/>
													<div class="absolute z-[1] w-full bg-base-100 rounded-box shadow-lg mt-1 hidden max-h-64 overflow-y-auto" id={ "dropdown-teams-menu-" + option.ID }>
														<div id={ "loading-teams-" + option.ID } class="p-4 text-center">
															<span class="loading loading-spinner loading-sm"></span>
															<span class="ml-2">Loading teams...</span>
														</div>
														<ul class="menu p-2 w-full hidden" id={ "team-list-" + option.ID }></ul>
														<div class="p-4 text-center text-sm opacity-70 hidden" id={ "no-teams-results-" + option.ID }>
															No teams found
														</div>
													</div>
												</div>
											</div>
											<div class="mt-1">
												<span class="text-xs opacity-70">Click to select/deselect</span>
											</div>
										</div>
									</div>
									@templ.Raw(fmt.Sprintf(`<script type="text/javascript">
										(function() {
											const gameId = %q;
											const searchInput = document.getElementById('search-' + gameId);
											const dropdownMenu = document.getElementById('dropdown-menu-' + gameId);
											const loadingElement = document.getElementById('loading-' + gameId);
											const leagueList = document.getElementById('league-list-' + gameId);
											const noResults = document.getElementById('no-results-' + gameId);
											const selectedCombinedContainer = document.getElementById('selected-combined-' + gameId);

											let allLeagues = [];
											let selectedLeagues = new Set();

											// Fetch leagues from API
											fetch('/api/league-options/' + gameId)
												.then(response => response.json())
												.then(data => {
													loadingElement.classList.add('hidden');

													if (data.error) {
														noResults.textContent = data.message;
														noResults.classList.remove('hidden');
													} else if (data.leagues && data.leagues.length > 0) {
														allLeagues = data.leagues;

														// Auto-select tier 1 leagues
														allLeagues.forEach(league => {
															if (league.is_tier1) {
																selectedLeagues.add(league.id);
															}
														});

														renderLeagues(allLeagues);
														updateCombinedDisplay();
														leagueList.classList.remove('hidden');
													} else {
														noResults.textContent = 'No leagues available for this game';
														noResults.classList.remove('hidden');
													}
												})
												.catch(error => {
													loadingElement.classList.add('hidden');
													noResults.textContent = 'Failed to load leagues. Please try again.';
													noResults.classList.remove('hidden');
													console.error('Error fetching leagues:', error);
												});

											// Render leagues list
											function renderLeagues(leagues) {
												leagueList.innerHTML = '';
												leagues.forEach(league => {
													const li = document.createElement('li');
													const label = document.createElement('label');
													label.className = 'label cursor-pointer justify-start gap-2 p-2';

													const checkbox = document.createElement('input');
													checkbox.type = 'checkbox';
													checkbox.className = 'checkbox checkbox-sm checkbox-primary';
													checkbox.checked = selectedLeagues.has(league.id);
													checkbox.addEventListener('change', () => toggleLeague(league));

													// Add league image with white background
													const imgContainer = document.createElement('div');
													imgContainer.className = 'bg-white rounded p-1 flex items-center justify-center';
													const img = document.createElement('img');
													img.src = league.image || '/static/images/default-logo.png';
													img.alt = league.name;
													img.className = 'w-6 h-6 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													imgContainer.appendChild(img);

													const span = document.createElement('span');
													span.textContent = league.name;
													span.className = 'text-sm';

													label.appendChild(checkbox);
													label.appendChild(imgContainer);
													label.appendChild(span);
													li.appendChild(label);
													leagueList.appendChild(li);
												});
											}

											// Toggle league selection
											function toggleLeague(league) {
												if (selectedLeagues.has(league.id)) {
													selectedLeagues.delete(league.id);
												} else {
													selectedLeagues.add(league.id);
												}
												updateCombinedDisplay();
											}

											// Filter leagues based on search input
											function filterLeagues(query) {
												const lowerQuery = query.toLowerCase();
												return allLeagues.filter(league =>
													league.name.toLowerCase().includes(lowerQuery)
												);
											}

											// Search input event
											let currentFilteredLeagues = [];
											searchInput.addEventListener('input', (e) => {
												const filtered = filterLeagues(e.target.value);
												currentFilteredLeagues = filtered;
												if (filtered.length > 0) {
													renderLeagues(filtered);
													leagueList.classList.remove('hidden');
													noResults.classList.add('hidden');
												} else {
													leagueList.classList.add('hidden');
													noResults.classList.remove('hidden');
												}
											});

											// Handle Enter key to select first result
											searchInput.addEventListener('keydown', (e) => {
												if (e.key === 'Enter' && currentFilteredLeagues.length > 0) {
													e.preventDefault();
													const firstLeague = currentFilteredLeagues[0];
													if (!selectedLeagues.has(firstLeague.id)) {
														selectedLeagues.add(firstLeague.id);
														updateCombinedDisplay();
														renderLeagues(currentFilteredLeagues);
													}
													searchInput.value = '';
													currentFilteredLeagues = allLeagues;
													renderLeagues(allLeagues);
												}
											});

											// Show dropdown on focus
											searchInput.addEventListener('focus', () => {
												dropdownMenu.classList.remove('hidden');
											});

											// Hide dropdown when clicking outside
											document.addEventListener('click', (e) => {
												if (!searchInput.contains(e.target) && !dropdownMenu.contains(e.target)) {
													dropdownMenu.classList.add('hidden');
												}
											});

											// TEAMS SECTION
											const searchTeamsInput = document.getElementById('search-teams-' + gameId);
											const dropdownTeamsMenu = document.getElementById('dropdown-teams-menu-' + gameId);
											const loadingTeamsElement = document.getElementById('loading-teams-' + gameId);
											const teamList = document.getElementById('team-list-' + gameId);
											const noTeamsResults = document.getElementById('no-teams-results-' + gameId);

											let allTeams = [];
											let selectedTeams = new Set();

											// Fetch teams from API
											fetch('/api/team-options/' + gameId)
												.then(response => response.json())
												.then(data => {
													loadingTeamsElement.classList.add('hidden');

													if (data.error) {
														noTeamsResults.textContent = data.message;
														noTeamsResults.classList.remove('hidden');
													} else if (data.teams && data.teams.length > 0) {
														allTeams = data.teams;
														renderTeams(allTeams);
														updateCombinedDisplay();
														teamList.classList.remove('hidden');
													} else {
														noTeamsResults.textContent = 'No teams available for this game';
														noTeamsResults.classList.remove('hidden');
													}
												})
												.catch(error => {
													loadingTeamsElement.classList.add('hidden');
													noTeamsResults.textContent = 'Failed to load teams. Please try again.';
													noTeamsResults.classList.remove('hidden');
													console.error('Error fetching teams:', error);
												});

											// Render teams list
											function renderTeams(teams) {
												teamList.innerHTML = '';
												teams.forEach(team => {
													const li = document.createElement('li');
													const label = document.createElement('label');
													label.className = 'label cursor-pointer justify-start gap-2 p-2';

													const checkbox = document.createElement('input');
													checkbox.type = 'checkbox';
													checkbox.className = 'checkbox checkbox-sm checkbox-primary';
													checkbox.checked = selectedTeams.has(team.id);
													checkbox.addEventListener('change', () => toggleTeam(team));

													// Add team image with white background
													const imgContainer = document.createElement('div');
													imgContainer.className = 'bg-white rounded p-1 flex items-center justify-center';
													const img = document.createElement('img');
													img.src = team.image || '/static/images/default-logo.png';
													img.alt = team.name;
													img.className = 'w-6 h-6 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													imgContainer.appendChild(img);

													const span = document.createElement('span');
													span.textContent = team.acronym ? team.acronym + ' - ' + team.name : team.name;
													span.className = 'text-sm';

													label.appendChild(checkbox);
													label.appendChild(imgContainer);
													label.appendChild(span);
													li.appendChild(label);
													teamList.appendChild(li);
												});
											}

											// Toggle team selection
											function toggleTeam(team) {
												if (selectedTeams.has(team.id)) {
													selectedTeams.delete(team.id);
												} else {
													selectedTeams.add(team.id);
												}
												updateCombinedDisplay();
											}

											// Update combined display with both leagues and teams
											function updateCombinedDisplay() {
												selectedCombinedContainer.innerHTML = '';

												// Add selected leagues
												allLeagues.filter(l => selectedLeagues.has(l.id)).forEach(league => {
													const badge = document.createElement('div');
													badge.className = 'badge badge-primary badge-lg gap-2 rounded-md py-3';

													// Add league image with white background
													const imgContainer = document.createElement('div');
													imgContainer.className = 'bg-white rounded p-0.5 flex items-center justify-center';
													const img = document.createElement('img');
													img.src = league.image || '/static/images/default-logo.png';
													img.alt = league.name;
													img.className = 'w-5 h-5 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													imgContainer.appendChild(img);
													badge.appendChild(imgContainer);

													const span = document.createElement('span');
													span.textContent = league.name;
													span.className = 'text-sm';
													badge.appendChild(span);

													const removeBtn = document.createElement('button');
													removeBtn.className = 'btn btn-ghost btn-xs btn-circle ml-1';
													removeBtn.innerHTML = '✕';
													removeBtn.addEventListener('click', () => {
														selectedLeagues.delete(league.id);
														updateCombinedDisplay();
														const filtered = filterLeagues(searchInput.value);
														renderLeagues(filtered);
													});

													badge.appendChild(removeBtn);
													selectedCombinedContainer.appendChild(badge);
												});

												// Add selected teams
												allTeams.filter(t => selectedTeams.has(t.id)).forEach(team => {
													const badge = document.createElement('div');
													badge.className = 'badge badge-secondary badge-lg gap-2 rounded-md py-3';

													// Add team image with white background
													const imgContainer = document.createElement('div');
													imgContainer.className = 'bg-white rounded p-0.5 flex items-center justify-center';
													const img = document.createElement('img');
													img.src = team.image || '/static/images/default-logo.png';
													img.alt = team.name;
													img.className = 'w-5 h-5 object-contain';
													img.onerror = function() {
														this.src = '/static/images/default-logo.png';
													};
													imgContainer.appendChild(img);
													badge.appendChild(imgContainer);

													const span = document.createElement('span');
													span.textContent = team.acronym ? team.acronym + ' - ' + team.name : team.name;
													span.className = 'text-sm';
													badge.appendChild(span);

													const removeBtn = document.createElement('button');
													removeBtn.className = 'btn btn-ghost btn-xs btn-circle ml-1';
													removeBtn.innerHTML = '✕';
													removeBtn.addEventListener('click', () => {
														selectedTeams.delete(team.id);
														updateCombinedDisplay();
														const filtered = filterTeams(searchTeamsInput.value);
														renderTeams(filtered);
													});

													badge.appendChild(removeBtn);
													selectedCombinedContainer.appendChild(badge);
												});
											}

											// Filter teams based on search input
											function filterTeams(query) {
												const lowerQuery = query.toLowerCase();
												return allTeams.filter(team =>
													team.name.toLowerCase().includes(lowerQuery) ||
													(team.acronym && team.acronym.toLowerCase().includes(lowerQuery))
												);
											}

											// Search input event for teams
											let currentFilteredTeams = [];
											searchTeamsInput.addEventListener('input', (e) => {
												const filtered = filterTeams(e.target.value);
												currentFilteredTeams = filtered;
												if (filtered.length > 0) {
													renderTeams(filtered);
													teamList.classList.remove('hidden');
													noTeamsResults.classList.add('hidden');
												} else {
													teamList.classList.add('hidden');
													noTeamsResults.classList.remove('hidden');
												}
											});

											// Handle Enter key to select first result for teams
											searchTeamsInput.addEventListener('keydown', (e) => {
												if (e.key === 'Enter' && currentFilteredTeams.length > 0) {
													e.preventDefault();
													const firstTeam = currentFilteredTeams[0];
													if (!selectedTeams.has(firstTeam.id)) {
														selectedTeams.add(firstTeam.id);
														updateCombinedDisplay();
														renderTeams(currentFilteredTeams);
													}
													searchTeamsInput.value = '';
													currentFilteredTeams = allTeams;
													renderTeams(allTeams);
												}
											});

											// Show dropdown on focus for teams
											searchTeamsInput.addEventListener('focus', () => {
												dropdownTeamsMenu.classList.remove('hidden');
											});

											// Hide dropdown when clicking outside for teams
											document.addEventListener('click', (e) => {
												if (!searchTeamsInput.contains(e.target) && !dropdownTeamsMenu.contains(e.target)) {
													dropdownTeamsMenu.classList.add('hidden');
												}
											});
										})();
									</script>`, option.ID))
								</div>
							</div>
						}
					</div>
				</div>

				<div class="divider"></div>

				<div class="stats shadow">
					<div class="stat">
						<div class="stat-title">Total Selected</div>
						<div class="stat-value text-primary">{ len(selectedOptions) }</div>
						<div class="stat-desc">Options chosen</div>
					</div>
				</div>
			} else {
				<div class="alert alert-warning">
					<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
					</svg>
					<span>No options were selected. Please go back and select at least one option.</span>
				</div>
			}

			<div class="card-actions justify-between mt-6">
				<a href="/" class="btn btn-outline">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
					</svg>
					Back to Options
				</a>
				
				if len(selectedOptions) > 0 {
					<button class="btn btn-success"
							hx-post="/process"
							hx-vals={ func() string {
								var ids []string
								for _, opt := range selectedOptions {
									ids = append(ids, opt.ID)
								}
								return fmt.Sprintf(`{"options": "%s"}`, strings.Join(ids, ","))
							}() }
							hx-target="#result">
						Process Selection
					</button>
				}
			</div>

			<div id="result" class="mt-4">
				<!-- Processing results would appear here -->
			</div>
		</div>
	</div>
}