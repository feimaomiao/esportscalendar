package components

import "github.com/feimaomiao/esportscalendar/dbtypes"
import "fmt"

templ PreviewPage(matches []dbtypes.GetMatchesBySelectionsRow) {
	@BaseLayout("Preview - EsportsCalendar") {
		<div class="container mx-auto p-4">
			<div class="max-w-5xl mx-auto">
				@PreviewPageContent(matches)
			</div>
		</div>
	}
}

templ PreviewPageContent(matches []dbtypes.GetMatchesBySelectionsRow) {
	<div class="card bg-base-100 shadow-xl">
		<div class="card-body">
			<h2 class="card-title text-2xl mb-4">Preview Your Calendar</h2>

			<div class="alert alert-info mb-4">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				<span>Showing matches from 7 days ago to 7 days from now based on your selections.</span>
			</div>

			<div id="preview-content" class="mt-4">
				if len(matches) == 0 {
					<div class="alert alert-warning">
						<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
						</svg>
						<span>No matches found for your selections in the next 14 days.</span>
					</div>
				} else {
					<div class="stats shadow mb-4">
						<div class="stat">
							<div class="stat-title">Total Matches</div>
							<div class="stat-value text-primary">{ fmt.Sprintf("%d", len(matches)) }</div>
						</div>
					</div>

					<div class="overflow-x-auto">
						<table class="table table-zebra w-full">
							<thead>
								<tr>
									<th>Date & Time</th>
									<th>Game</th>
									<th>League</th>
									<th>Match</th>
									<th>Status</th>
								</tr>
							</thead>
							<tbody>
								for _, match := range matches {
									<tr>
										<td>
											if match.ExpectedStartTime.Valid {
												<span class="font-mono text-sm">
													{ match.ExpectedStartTime.Time.Format("2006-01-02 15:04") }
												</span>
											} else {
												<span class="text-gray-500">TBD</span>
											}
										</td>
										<td>
											<span class="badge badge-outline">{ match.GameName }</span>
										</td>
										<td>
											<div class="font-medium">{ match.LeagueName }</div>
										</td>
										<td>
											<div class="flex items-center gap-2">
												<div class="flex items-center gap-1">
													if match.Team1Image.Valid && match.Team1Image.String != "" {
														<img src={ match.Team1Image.String } alt={ match.Team1Name } class="w-6 h-6 rounded"/>
													}
													<span class="font-semibold">
														if match.Team1Acronym.Valid && match.Team1Acronym.String != "" {
															{ match.Team1Acronym.String }
														} else {
															{ match.Team1Name }
														}
													</span>
												</div>
												<span class="text-gray-500">vs</span>
												<div class="flex items-center gap-1">
													if match.Team2Image.Valid && match.Team2Image.String != "" {
														<img src={ match.Team2Image.String } alt={ match.Team2Name } class="w-6 h-6 rounded"/>
													}
													<span class="font-semibold">
														if match.Team2Acronym.Valid && match.Team2Acronym.String != "" {
															{ match.Team2Acronym.String }
														} else {
															{ match.Team2Name }
														}
													</span>
												</div>
											</div>
										</td>
										<td>
											if match.Finished {
												<span class="badge badge-success">
													Finished { fmt.Sprintf("%d-%d", match.Team1Score, match.Team2Score) }
												</span>
											} else {
												<span class="badge badge-info">Upcoming</span>
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>

			<div class="card-actions justify-between mt-6">
				<a href="/lts" id="back-to-selection-btn" class="btn btn-outline">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
					</svg>
					Back to Selection
				</a>
				<button type="button" class="btn btn-primary">
					Export Calendar
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
					</svg>
				</button>
			</div>
			<script>
				// Handle back to selection with saved game options
				document.getElementById('back-to-selection-btn').addEventListener('click', async (e) => {
					e.preventDefault();

					const savedGameOptions = sessionStorage.getItem('selectedGameOptions');
					if (savedGameOptions) {
						const gameIds = JSON.parse(savedGameOptions);

						const response = await fetch('/lts', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
								'HX-Request': 'true'
							},
							body: JSON.stringify({ options: gameIds })
						});

						if (response.ok) {
							const html = await response.text();
							const container = document.querySelector('.container');
							if (container) {
								container.innerHTML = html;

								// Execute scripts in the newly inserted HTML
								const scripts = container.querySelectorAll('script');
								scripts.forEach(oldScript => {
									const newScript = document.createElement('script');
									if (oldScript.src) {
										newScript.src = oldScript.src;
									} else {
										newScript.textContent = oldScript.textContent;
									}
									oldScript.parentNode.replaceChild(newScript, oldScript);
								});

								window.history.pushState({}, '', '/lts');
							}
						}
					} else {
						// No saved selections, just navigate normally
						window.location.href = '/lts';
					}
				});
			</script>
		</div>
	</div>
}
