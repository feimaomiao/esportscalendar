package components

import "github.com/feimaomiao/esportscalendar/dbtypes"
import "fmt"

templ PreviewPage(matches []dbtypes.GetFutureMatchesBySelectionsRow, showingPast bool, hideScores bool) {
	@BaseLayout("Preview - EsportsCalendar") {
		@ProgressIndicator(3)
		<div class="container mx-auto p-4">
			<div class="max-w-5xl mx-auto">
				@PreviewPageContent(matches, showingPast, hideScores)
			</div>
		</div>
	}
}

templ PreviewPageContent(matches []dbtypes.GetFutureMatchesBySelectionsRow, showingPast bool, hideScores bool) {
	<div class="card bg-base-100 shadow-xl">
		<div class="card-body">
			<h2 class="card-title text-2xl mb-4">Here's what your calendar would look like</h2>
			<div class="alert alert-info mb-4">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-5 h-5">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				<span>All times are displayed in your <strong>local timezone</strong></span>
			</div>
			<div id="preview-content" class="mt-4">
				if len(matches) == 0 {
					<div class="alert alert-warning">
						<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
						</svg>
						<span>No matches found for your selections.</span>
					</div>
				} else {
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
						for _, match := range matches {
							<div class="card bg-base-200 shadow-md hover:shadow-xl transition-shadow">
								<div class="card-body p-4">
									<!-- Game Badge -->
									<div class="mb-2">
										<span class="badge badge-primary badge-sm">{ match.GameName }</span>
									</div>
									<!-- Match Name -->
									<h3 class="card-title text-base mb-2">{ match.Name }</h3>
									<!-- Teams -->
									<div class="flex items-center justify-between gap-2 mb-3">
										<div class="flex items-center gap-2 flex-1">
											if match.Team1Image.Valid && match.Team1Image.String != "" {
												<img src={ match.Team1Image.String } alt={ match.Team1Name } class="w-8 h-8 rounded"/>
											}
											<span class="font-semibold text-sm truncate">
												if match.Team1Acronym.Valid && match.Team1Acronym.String != "" {
													{ match.Team1Acronym.String }
												} else {
													{ match.Team1Name }
												}
											</span>
										</div>
										<span class="text-xs text-gray-500 font-bold">VS</span>
										<div class="flex items-center gap-2 flex-1 justify-end">
											<span class="font-semibold text-sm truncate">
												if match.Team2Acronym.Valid && match.Team2Acronym.String != "" {
													{ match.Team2Acronym.String }
												} else {
													{ match.Team2Name }
												}
											</span>
											if match.Team2Image.Valid && match.Team2Image.String != "" {
												<img src={ match.Team2Image.String } alt={ match.Team2Name } class="w-8 h-8 rounded"/>
											}
										</div>
									</div>
									<!-- Expected Start Time -->
									<div class="flex items-center gap-2 text-sm">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
										</svg>
										if match.ExpectedStartTime.Valid {
											<span class="match-time" data-utc-time={ match.ExpectedStartTime.Time.Format("2006-01-02T15:04:05Z07:00") }>
												<span class="font-mono match-date">
													{ match.ExpectedStartTime.Time.Format("Jan 02, 2006") }
												</span>
												<span class="font-mono font-semibold match-hour">
													{ match.ExpectedStartTime.Time.Format("15:04") }
												</span>
											</span>
										} else {
											<span class="text-gray-500">TBD</span>
										}
									</div>
									<!-- League -->
									<div class="text-xs text-gray-500 mt-2 truncate">
										{ match.LeagueName }
									</div>
									<!-- Status Badge -->
									<div class="card-actions justify-end mt-2">
										if match.Finished {
											if hideScores {
												<span class="badge badge-success badge-sm">Finished</span>
											} else {
												<span class="badge badge-success badge-sm">
													{ fmt.Sprintf("%d-%d", match.Team1Score, match.Team2Score) }
												</span>
											}
										} else {
											<span class="badge badge-info badge-sm">Upcoming</span>
										}
									</div>
								</div>
							</div>
						}
					</div>
				}
			</div>
			<div class="card-actions flex-col md:flex-row md:justify-between gap-4 mt-6">
				<a href="/lts" id="back-to-selection-btn" class="btn btn-outline w-full md:w-auto">
					@IconArrowLeft("w-5 h-5")
					Back to Selection
				</a>
				<button type="button" id="export-calendar-btn" class="btn btn-primary w-full md:w-auto">
					Export Calendar
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3"></path>
					</svg>
				</button>
			</div>
			<script>
				// Convert UTC times to local timezone
				(function() {
					const matchTimes = document.querySelectorAll('.match-time');
					matchTimes.forEach(timeElement => {
						const utcTimeStr = timeElement.getAttribute('data-utc-time');
						if (!utcTimeStr) return;

						const utcDate = new Date(utcTimeStr);
						if (isNaN(utcDate.getTime())) return;

						// Format date
						const dateOptions = { month: 'short', day: '2-digit', year: 'numeric' };
						const localDateStr = utcDate.toLocaleDateString('en-US', dateOptions);

						// Format time
						const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
						const localTimeStr = utcDate.toLocaleTimeString('en-US', timeOptions);

						// Update the display
						const dateSpan = timeElement.querySelector('.match-date');
						const hourSpan = timeElement.querySelector('.match-hour');

						if (dateSpan) dateSpan.textContent = localDateStr;
						if (hourSpan) hourSpan.textContent = localTimeStr;
					});
				})();

				// Handle keyboard events
				document.addEventListener('keydown', (e) => {
					// Enter key to trigger export
					if (e.key === 'Enter') {
						e.preventDefault();
						const exportBtn = document.getElementById('export-calendar-btn');
						if (exportBtn && !exportBtn.disabled) {
							exportBtn.click();
						}
					}
				});

				// Handle back to selection with saved game options
				document.getElementById('back-to-selection-btn').addEventListener('click', async (e) => {
					e.preventDefault();
					// Just navigate to /lts - the page will restore selections from sessionStorage
					window.location.href = '/lts';
				});

				// Handle export calendar button
				document.getElementById('export-calendar-btn').addEventListener('click', async (e) => {
					e.preventDefault();
					const btn = e.currentTarget;

					// Get selections from sessionStorage
					const previewSelections = sessionStorage.getItem('preview-selections');
					if (!previewSelections) {
						alert('No selections found. Please go back and make your selections again.');
						return;
					}

					// Disable button and show loading state
					btn.disabled = true;
					btn.classList.add('loading');

					try {
						const response = await fetch('/export', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: previewSelections
						});

						if (response.ok) {
							const data = await response.json();

							// Try to copy to clipboard
							try {
								await navigator.clipboard.writeText(data.url);
								alert('Calendar link created and copied to clipboard!\n\n' + data.url);
							} catch (err) {
								// Show modal with selectable text input
								const modal = document.createElement('div');
								modal.className = 'modal modal-open';
								modal.innerHTML = `
									<div class="modal-box">
										<h3 class="font-bold text-lg mb-4">Calendar Link Created!</h3>
										<p class="mb-4">Copy the link below:</p>
										<input type="text" readonly value="${data.url}"
											class="input input-bordered w-full font-mono text-sm"
											id="calendar-url-input"
											onclick="this.select()">
										<div class="modal-action">
											<button class="btn" onclick="this.closest('.modal').remove()">Close</button>
										</div>
									</div>
								`;
								document.body.appendChild(modal);

								// Auto-select the text
								setTimeout(() => {
									const input = document.getElementById('calendar-url-input');
									if (input) {
										input.focus();
										input.select();
									}
								}, 100);
							}
						} else {
							const errorData = await response.json();
							alert('Failed to export calendar: ' + (errorData.error || 'Unknown error'));
						}
					} catch (error) {
						console.error('Error exporting calendar:', error);
						alert('Error exporting calendar: ' + error.message);
					} finally {
						// Re-enable button
						btn.disabled = false;
						btn.classList.remove('loading');
					}
				});
			</script>
		</div>
	</div>
}
